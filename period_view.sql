CREATE TABLE IF NOT EXISTS REASONS (ID SERIAL, ENDPOINT_ID INTEGER, EVENT_TIME TIMESTAMP WITH TIME ZONE, REASON VARCHAR(250),PRIMARY KEY (ID));

COPY REASONS(ENDPOINT_ID,

						EVENT_TIME,
						REASON)
FROM 'C:\Work\PostgreSQL\14\tmp\reasons.csv'
DELIMITER ';' CSV HEADER;


CREATE TABLE IF NOT EXISTS PERIODS(ID serial, ENDPOINT_ID INTEGER, MODE_START TIMESTAMP WITH TIME ZONE, MODE_DURATION INTEGER, "label" VARCHAR(50), PRIMARY KEY (ID));

COPY PERIODS(ENDPOINT_ID,

						MODE_START,
						MODE_DURATION,
						"label")
FROM 'C:\Work\PostgreSQL\14\tmp\periods.csv'
DELIMITER ';' CSV HEADER;


CREATE TABLE IF NOT EXISTS OPERATORS(ID serial, ENDPOINT_ID INTEGER, LOGIN_TIME TIMESTAMP WITH TIME ZONE, LOGOUT_TIME TIMESTAMP WITH TIME ZONE, "operator" VARCHAR(100), PRIMARY KEY (ID));

COPY OPERATORS(ENDPOINT_ID,

						LOGIN_TIME,
						LOGOUT_TIME,
						"operator")
FROM 'C:\Work\PostgreSQL\14\tmp\operators.csv'
DELIMITER ';' CSV HEADER;


CREATE TABLE IF NOT EXISTS ENERGY(ID serial, ENDPOINT_ID INTEGER, EVENT_TIME TIMESTAMP WITH TIME ZONE, KWH NUMERIC(10, 5), PRIMARY KEY(ID));

COPY ENERGY(ENDPOINT_ID,

						EVENT_TIME,
						KWH)
FROM 'C:\Work\PostgreSQL\14\tmp\energy.csv'
DELIMITER ';' CSV HEADER;


CREATE INDEX IF NOT EXISTS IX_ORDER ON ENERGY (EVENT_TIME, ENDPOINT_ID);


CREATE VIEW RES AS
SELECT DISTINCT FT.ENDPOINT_ID,
	MODE_START,
	MODE_END,
	MODE_DURATION,
	LABEL,
	REASON,
OPERATOR AS OPERATOR_NAME,
	ENERGY_SUM
FROM
	(SELECT DISTINCT FULLTABLE.ENDPOINT_ID,
			MODE_START,
			MODE_END,
			MODE_DURATION,
			LABEL,
			SUM(KWH) AS ENERGY_SUM
		FROM
			(SELECT ENDPOINT_ID,
					MODE_START,
					(MODE_START + MAKE_INTERVAL(MINS => MODE_DURATION)) AS MODE_END,
					MODE_DURATION,
					LABEL
				FROM PERIODS) AS FULLTABLE
		LEFT JOIN ENERGY ON (FULLTABLE.ENDPOINT_ID = ENERGY.ENDPOINT_ID AND ENERGY.EVENT_TIME BETWEEN MODE_START AND MODE_END)
		GROUP BY FULLTABLE.ENDPOINT_ID,
			MODE_START,
			MODE_END,
			MODE_DURATION,
			LABEL) AS FT
LEFT JOIN OPERATORS ON (FT.ENDPOINT_ID = OPERATORS.ENDPOINT_ID AND (MODE_START >= LOGIN_TIME AND MODE_END <= LOGOUT_TIME))
LEFT JOIN REASONS ON (REASONS.ENDPOINT_ID = FT.ENDPOINT_ID AND REASONS.EVENT_TIME = MODE_END)